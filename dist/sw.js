export{};const n="v1",i=["./index.html"],c=self;async function l(t){const e=await caches.match(t);return e||null}async function h(t){try{const e=await fetch(t),a=.7,{quota:o,usage:s}=await navigator.storage.estimate();if(!((s??0)/(o??1)>=a)){const r=e.clone();await(await caches.open(n)).put(t,r)}return e}catch(e){console.error("[⚙️] Network fetch failed!"),console.error(e)}return new Response("Service Unavailable",{headers:new Headers({"Content-Type":"text/plain"}),status:503,statusText:"Service Unavailable"})}c.addEventListener("install",async()=>{try{await(await caches.open(n)).addAll(i),await c.skipWaiting(),console.log(`[⚙️] Service worker installed for version ${n}`)}catch(t){console.error("[⚙️] Error installing worker:"),console.error(t)}}),c.addEventListener("activate",async()=>{(await c.clients.matchAll({includeUncontrolled:!0})).forEach(a=>{console.log(`[⚙️] Matching client: ${a.url}`)});const e=await caches.keys();for await(const a of e)a!==n&&(console.log(`[⚙️] Deleting old cache "${a}"`),await caches.delete(a)),console.log(`[⚙️] Claming clients for version: ${n}`),await c.clients.claim()}),c.addEventListener("fetch",async t=>{let e=await l(t.request);return e||(e=await h(t.request)),e});
